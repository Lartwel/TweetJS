{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","name","id","email","react_default","a","createElement","className","alt","src","concat","CardList","map","robot","index","src_components_Card","key","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","style","border","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkCounter","setState","counter","state","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","onClick","Component","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","rootReducers","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9aa4bc3c.chunk.js","sourcesContent":["import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n  } from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {} ) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, { searchField: action.payload })\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {} ) => {\r\n  switch(action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign( {}, state, { isPending: true } )\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign( {}, state, { robots: action.payload }, { isPending: false} )\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign( {}, state,  { error: action.payload }, { isPending: false} )\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({name, id, email}) => {\r\n  return(\r\n    <div className=\"card tc br4 ba b--black-10 grow ma1 pa3 mb4\">\r\n      <img alt={name} src={`https://robohash.org/${id}size=100x100\"`} />\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  return(\r\n    \r\n    <div className=\" flex flex-wrap justify-around\">\r\n    {\r\n      robots.map( (robot, index) => {\r\n        return (\r\n          <Card\r\n            key    = {robot.id}\r\n            id     = {robot.id}\r\n            name   = {robot.name}\r\n            email  = {robot.email}\r\n           />\r\n        )\r\n      })\r\n    }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return(\r\n    <div className=\"pa3\">\r\n      <input onChange={searchChange} className=\"bg-lightest-blue br3 b--light-blue pa3 mb4\" type=\"search\" placeholder=\"Search Robot\"></input>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n  return(\r\n    <div style={{border: '3px solid #333', overflowY: 'scroll', height: 600}}>\r\n      {props.children}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => ({\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  })\r\n\r\n//dispatch => it's what triggers the action\r\nconst mapDispatchToProps = dispatch => ({ \r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  });\r\n\r\nclass App extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      counter: 0,\r\n    }\r\n  }\r\n\r\n  checkCounter = ()=> {\r\n    this.setState({counter: this.state.counter + 1})\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.onRequestRobots();\r\n  } \r\n  \r\n  render(){\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    // console.log(this.props)\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    return isPending ? \r\n      <div className=\"tc\"><h1 className=\"f1\">Loading</h1></div>\r\n      : (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">Robo Friends</h1>\r\n          <SearchBox searchChange = {onSearchChange} />\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n          <button id=\"check-counter\" onClick={this.checkCounter}>State Counter: {this.state.counter}</button>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\n//subscribe to any changes in the Store and update the App component if the store state changes\r\n//mapStateToProps => what state should we listen to\r\n//mapDispatchToProps => what action should we listen to\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCHFIELD,\r\n  payload: text,\r\n});\r\n\r\n\r\n/* \r\n\r\nredux's action is supposed to return an object not a function, but in our case here we're fetching a data from a server (getting a Promise) so that is asynchronous and our data take time to be fetched. While pending or failing of fetching data, the response won't be the certain data we need so we need to a function that being hooked to the action and when the required data is being fetched 'successfully', the state is changed in the reducer.\r\n\r\nfor this purpose we're using redux-thunk to work with a function returned instead of an object\r\n*/\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      // console.log(data)\r\n      return dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data})})\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers';\nimport App from './containers/App';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst rootReducers = combineReducers({ searchRobots, requestRobots })\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware))\n\nReactDOM.render( <Provider store = {store}> <App /> </Provider>, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}